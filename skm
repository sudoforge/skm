#!/bin/sh

keydir=~/.ssh/keys
sp="    "

declare -A keys
for prefix in $(\
    find ${keydir} -type f ! -name '*.pub' | \
    sed -e "s|${keydir}/||" | \
    sed -e "s/\..*$//" | \
    sort -u); do
    keys[${prefix}]=$(\
        find ${keydir} -type f ! -name '*.pub' -name "${prefix}.*" | \
        sed -e "s|${keydir}/||" | \
        sort)
done

function moveKeyfile()
{
    local shortname=`echo ${1} | sed -e 's/.*disabled.//'`
    printf "${sp}${shortname}... ["
    if [ -e ${1} ] && [ ! -e ${2} ]; then
        mv ${1} ${2}

        if [ ${?} -eq 0 ]; then
            printf "OKAY"
        else
            printf "FAIL"
        fi
    elif [ -e ${2} ]; then
        printf "SKIP"
    else
        printf "MISS"
    fi

    printf "]\n"
}

function changeKeyStatus()
{
    local action=${1}
    shift

    for key in $@; do
        local enabledKey="${keydir}/${key}"
        local disabledKey="${keydir}/disabled.${key}"

        if [ ! -e ${enabledKey} ] && [ ! -e ${disabledKey} ]; then
            echo "$key does not seem to exist."
        elif [ ${action} == "enable" ] && [ -e ${enabledKey} ]; then
            echo "$key is already enabled."
        elif [ ${action} == "disable" ] && [ -e ${disabledKey} ]; then
            echo "$key is already disabled."
        elif [ ${action} == "disable" ]; then
            moveKeyfile ${enabledKey} ${disabledKey}
        elif [ ${action} == "enable" ]; then
            moveKeyfile ${disabledKey} ${enabledKey}
        else
            echo "Oops! Something went wrong. ${action} is not a valid action."
        fi
    done
}

function addKeysOrGroups()
{
    local skipped=""
    for param in ${@}; do
        if [[ ${keys["$param"]} ]]; then
            for key in ${keys["$param"]}; do
                if [ -e "${keydir}/${key}" ]; then
                    ssh-add ${keydir}/${key}
                else
                    skipped="${skipped}${param} "
                fi
            done
        elif [ -e "${keydir}/${param}" ]; then
            ssh-add ${keydir}/${param}
        else
            skipped="${skipped}${param} "
        fi
    done

    if [ "${skipped}" != "" ]; then
        echo && echo "Skipped:"
        for param in ${skipped}; do
            echo "${param}"
        done
    fi
}

function echoStringIfNotEmpty()
{
    if [[ ! -z "${1}" ]]; then
        echo "${sp}${sp}${1}"
    fi
}

function echoActiveKeys()
{
    local output=`ssh-add -L | sed -e 's/The agent has no identities.//' | sed -e "s|${keydir}/||" | sed -e 's|ssh-rsa.* ||'`

    for key in ${output}; do
        echoStringIfNotEmpty ${key}
    done
}

function echoEnabledKeys()
{
    local activeKeys=`ssh-add -L | sed -e 's/The agent has no identities.//' | sed -e "s|${keydir}/||" | sed -e 's|ssh-rsa.* ||'`

    for key in ${keys[@]}; do
        if [[ ! "${activeKeys}" =~ "${key}" ]]; then
            echoStringIfNotEmpty ${key}
        fi
    done
}

function echoDisabledKeys()
{
    local disabledKeys=$(find ${keydir} -type f ! -name '*.pub' -name 'disabled.*' | sort)

    for key in ${disabledKeys}; do
        local string=`echo ${key} | sed -e "s|${keydir}/disabled\.||"`
        echoStringIfNotEmpty ${string}
    done
}

case "${1}" in
    disable)
        echo "Disabling:"
        changeKeyStatus "disable" ${@:2}
        ;;
    enable)
        echo "Enabling:"
        changeKeyStatus "enable" ${@:2}
        ;;
    export)
        echo "Listing public key information:" && echo

        for keyfile in ${@:2}; do
            publicKey="${keydir}/${keyfile}.pub"
            privateKey="${keydir}/${keyfile}"
            isDisabled="${keydir}/disabled.${keyfile}"

            printf "[ ${keyfile} ] "
            if [ -e ${isDisabled} ]; then
                printf "is disabled, skipping.\n"
            elif [ ! -e ${privateKey} ]; then
                printf "missing private key, skipping.\n"
            elif [ ! -e ${publicKey} ]; then
                printf "missing private key, skipping.\n"
            elif [ ! -r ${publicKey} ]; then
                printf "public key is not readable, skipping.\n"
            else
                printf "\n" && cat ${publicKey}
            fi

            echo
        done
        ;;
    add)
        if [ "${2}" == "all" ]; then
            addKeysOrGroups ${keys[@]}
        elif [ "${2}" != "" ]; then
            addKeysOrGroups ${@:2}
        else
            echo "'skm add' requires at least one parameter."
        fi
        ;;
    ls)
        echo
        echo "${sp}[ ACTIVE KEYS ]"
        echoActiveKeys
        ;; 
    status)
        echo
        echo "SKM Status:"

        echo "${sp}[ ACTIVE ]"
        echoActiveKeys
        echo
        echo "${sp}[ ENABLED ]"
        echoEnabledKeys
        echo
        echo "${sp}[ DISABLED ]"
        echoDisabledKeys
        ;;
    clear)
        ssh-add -D
        ;;
    *)
        exit
        ;;
esac
