#!/bin/sh

keydir=~/.ssh/keys
sp="    "

declare -A keys
keys[ops]=$(find $keydir -type f ! -name '*.pub' -name 'ops.*' | sort)
keys[vcs]=$(find $keydir -type f ! -name '*.pub' -name 'vcs.*' | sort)

function moveKeyfile()
{
    local shortname=`echo $1 | sed -e 's/.*disabled.//'`
    printf "$sp$shortname... ["
    if [ -e $1 ] && [ ! -e $2 ]; then
        mv $1 $2

        if [ $? -eq 0 ]; then
            printf "OKAY"
        else
            printf "FAIL"
        fi
    elif [ -e $2 ]; then
        printf "SKIP"
    else
        printf "MISS"
    fi

    printf "]\n"
}

function enableOrDisableKeys()
{
    local action=$1
    shift

    for key in $@; do
        local enabledKey="$keydir/$key"
        local disabledKey="$keydir/disabled.$key"

        if [ ! -e $enabledKey ] && [ ! -e $disabledKey ]; then
            echo "$key does not seem to exist."
        elif [ $action == "enable" ] && [ -e $enabledKey ]; then
            echo "$key is already enabled."
        elif [ $action == "disable" ] && [ -e $disabledKey ]; then
            echo "$key is already disabled."
        elif [ $action == "disable" ]; then
            moveKeyfile $enabledKey $disabledKey
        elif [ $action == "enable" ]; then
            moveKeyfile $disabledKey $enabledKey
        else
            echo "Oops! Something went wrong. $action is not a valid action."
        fi
    done
}

function addToAgentByPrefix()
{
    if [ ${#@} -eq 0 ]; then
        echo "No keys matching the given pattern."
    else
        ssh-add $@
    fi
}

function echoStringIfNotEmpty()
{
    if [[ ! -z "$1" ]]; then
        echo "$sp$sp$1"
    fi
}

function echoActiveKeys()
{
    local output=`ssh-add -L | sed -e 's/The agent has no identities.//' | sed -e "s|$keydir/||" | sed -e 's|ssh-rsa.* ||'`

    for key in $output; do
        echoStringIfNotEmpty $key
    done
}

function echoEnabledKeys()
{
    local activeKeys=`ssh-add -L | sed -e 's/The agent has no identities.//' | sed -e "s|$keydir/||" | sed -e 's|ssh-rsa.* ||'`

    for key in ${keys[@]}; do
        local string=`echo $key | sed -e "s|${keydir}/||"`
        if [[ ! "$activeKeys" =~ "$string" ]]; then
            echoStringIfNotEmpty $string
        fi
    done
}

function echoDisabledKeys()
{
    local disabledKeys=$(find $keydir -type f ! -name '*.pub' -name 'disabled.*')

    for key in $disabledKeys; do
        local string=`echo $key | sed -e "s|${keydir}/disabled\.||"`
        echoStringIfNotEmpty $string
    done
}

case "$1" in
    disable)
        shift
        echo "Disabling:"
        enableOrDisableKeys "disable" $@
        ;;
    enable)
        shift
        echo "Enabling:"
        enableOrDisableKeys "enable" $@
        ;;
    export)
        shift
        echo "Listing public key information:" && echo

        for keyfile in $targets; do
            publicKey="$keydir/$keyfile.pub"
            privateKey="$keydir/$keyfile"
            isDisabled="$keydir/disabled.$keyfile"

            printf "[ $keyfile ] "
            if [ -e $isDisabled ]; then
                printf "is disabled, skipping.\n"
            elif [ ! -e $privateKey ]; then
                printf "missing private key, skipping.\n"
            elif [ ! -e $publicKey ]; then
                printf "missing private key, skipping.\n"
            elif [ ! -r $publicKey ]; then
                printf "public key is not readable, skipping.\n"
            else
                printf "\n" && cat $publicKey
            fi

            echo
        done
        ;;
    vcs)
        addToAgentByPrefix ${keys[vcs]}
        ;;
    ops)
        addToAgentByPrefix ${keys[ops]}
        ;;
    all)
        echo "Adding all enabled keys:"
        for key in "${keys[@]}"; do
            ssh-add $key
        done
        ;;
    status|list|ls)
        shift
        echo
        echo "SKM Status:"

        echo "$sp[ ACTIVE ]"
        echoActiveKeys
        echo
        echo "$sp[ ENABLED ]"
        echoEnabledKeys
        echo
        echo "$sp[ DISABLED ]"
        echoDisabledKeys
        ;;
    clear)
        ssh-add -D
        ;;
    *)
        exit
        ;;
esac
